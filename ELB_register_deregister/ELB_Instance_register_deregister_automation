import boto3
import json
import sys
import pickle
import os, glob

def getListOfInstancesUnderELB(elb):
  session = boto3.session.Session(profile_name='saurabh')
  client = session.client('elb')

  response = client.describe_load_balancers(LoadBalancerNames=[elb])
  responseInstanceId = response['LoadBalancerDescriptions'][0]['Instances']
  #print "Instance Id's are " + str(responseInstanceId) 
  instanceIDList = [str(v) for lst in responseInstanceId for k, v in lst.items()] 
  #print instanceIDList
  azInstanceDict = {}
  for i in instanceIDList:
	#print i
	client = session.client('ec2')
	response = client.describe_instances(InstanceIds=[i])
	availabilityZone = response['Reservations'][0]['Instances'][0]['Placement']['AvailabilityZone']
 	azInstanceDict[i] = availabilityZone+","+elb 
  
  #print azInstanceDict
  if "test" not in elb:
    fileInstance_out = open( "main-test-"+elb+".pickle","wb")
    pickle.dump(azInstanceDict, fileInstance_out)
    fileInstance_out.close()

  return azInstanceDict



def register(az,elb):

  files = glob.glob( "*"+elb+".pickle")
  print files
  files = ''.join(files)
  pickle_in = open( files,"rb")

  azInstanceDict = pickle.load(pickle_in)

  session = boto3.session.Session(profile_name='saurabh')
  client = session.client('elb')

  response = client.describe_load_balancers(LoadBalancerNames=[elb])
  responseInstanceId = response['LoadBalancerDescriptions'][0]['Instances']
  noOfInstancesAfter = len(response['LoadBalancerDescriptions'][0]['Instances'])
  print "Total instances attached before Registration " + str(noOfInstancesAfter)
  print "Instance Id's are: " + str(responseInstanceId)

  for k,v in azInstanceDict.items():
    #print k
    #print v
    listOfvalue = v.split(',')
    azname= listOfvalue[0]
    elbname = listOfvalue[1]
    if azname == az:
      	print "Registrig instance: " + str(k) + " with " + str(elb)
      	register = client.register_instances_with_load_balancer(LoadBalancerName=elb,Instances=[{'InstanceId': k},])

  response = client.describe_load_balancers(LoadBalancerNames=[elb])
  responseInstanceId = response['LoadBalancerDescriptions'][0]['Instances']
  noOfInstancesAfter = len(response['LoadBalancerDescriptions'][0]['Instances'])
  print "Total instances attached after Registration " + str(noOfInstancesAfter)
  print "Instance Id's are: " + str(responseInstanceId)


def deregister(az,elb):

  azInstanceDict = getListOfInstancesUnderELB(elb)

  session = boto3.session.Session(profile_name='saurabh')
  client = session.client('elb')

  response = client.describe_load_balancers(LoadBalancerNames=[elb])
  responseInstanceId = response['LoadBalancerDescriptions'][0]['Instances']
  noOfInstancesAfter = len(response['LoadBalancerDescriptions'][0]['Instances'])
  print "Total instances attached before Deregistration: " + str(noOfInstancesAfter)
  print "Instance Id's are: " + str(responseInstanceId)


  for k,v in azInstanceDict.items():
    #print k
    #print v
    listOfvalue = v.split(',')
    azname= listOfvalue[0]
    elbname = listOfvalue[1]
    if azname == az:
        print "Deregistrig instance: " + str(k) + " with " + str(elb)
        deregister = client.deregister_instances_from_load_balancer(LoadBalancerName=elb,Instances=[{'InstanceId': k },])
  
  response = client.describe_load_balancers(LoadBalancerNames=[elb])
  responseInstanceId = response['LoadBalancerDescriptions'][0]['Instances']
  noOfInstancesAfter = len(response['LoadBalancerDescriptions'][0]['Instances'])
  print "Total instances attached after Deregistration " + str(noOfInstancesAfter)
  print "Instance Id's are: " + str(responseInstanceId)
